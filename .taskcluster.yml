version: 1
reporting: checks-v1
policy:
  pullRequests: public
tasks:
  $let:
    owner: taskcluster-internal@mozilla.com

    # This only supports pushes and pull requests for now.
    # If we start responding to another action type, make this
    # a $match.
    repo:
      $if: 'tasks_for == "github-push"'
      then:
        git_url: ${event.repository.url}
        url: ${event.repository.url}
        ref: ${event.after}
      else:
        git_url: ${event.pull_request.head.repo.git_url}
        url: ${event.pull_request.head.repo.url}
        ref: ${event.pull_request.head.sha}
  in:
    $let:
      environments:
        - image: node:6
          name: node:6 tests
          command:
            - /bin/bash
            - '--login'
            - '-c'
            - >-
              git clone ${repo.git_url} repo &&
              cd repo &&
              git config advice.detachedHead false &&
              git checkout ${repo.ref} &&
              yarn &&
              yarn test
        - image: node:10
          name: node:10 tests
          command:
            - /bin/bash
            - '--login'
            - '-c'
            - >-
              git clone ${repo.git_url} repo &&
              cd repo &&
              git config advice.detachedHead false &&
              git checkout ${repo.ref} &&
              yarn &&
              yarn test
        - image: 'node:10'
          name: node import test
          command:
            - /bin/bash
            - '--login'
            - '-c'
            - >-
              git clone ${repo.git_url} repo &&
              cd repo &&
              git config advice.detachedHead false &&
              git checkout ${repo.ref} &&
              yarn &&
              bash package-test.sh
        - image: 'python:2.7'
          name: python:2.7 tests
          command:
            - /bin/bash
            - '--login'
            - '-c'
            - >-
              git clone ${repo.git_url} repo &&
              cd repo &&
              git config advice.detachedHead false &&
              git checkout ${repo.ref} &&
              pip install --no-use-pep517 -e . &&
              python setup.py test
        - image: 'python:3.6'
          name: python:3.6 tests
          command:
            - /bin/bash
            - '--login'
            - '-c'
            - >-
              git clone ${repo.git_url} repo &&
              cd repo &&
              git config advice.detachedHead false &&
              git checkout ${repo.ref} &&
              pip install --no-use-pep517 -e . &&
              python setup.py test
        - image: golang:1.11
          name: golang tests
          command:
            - /bin/bash
            - '-c'
            - >-
              mkdir -p /go/src/github.com/taskcluster/json-e &&
              cd /go/src/github.com/taskcluster/json-e &&
              git clone ${repo.git_url} . &&
              git config advice.detachedHead false &&
              git checkout ${repo.ref} &&
              go get -v -d -t ./... &&
              go test -v -race ./...
        - image: golang:1.11
          name: golang lint
          command:
            - /bin/bash
            - '-c'
            - >-
              curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $GOPATH/bin v1.17.1 &&
              mkdir -p /go/src/github.com/taskcluster/json-e &&
              cd /go/src/github.com/taskcluster/json-e &&
              git clone ${repo.git_url} . &&
              git config advice.detachedHead false &&
              git checkout ${repo.ref} &&
              go get -v -d -t ./... &&
              golangci-lint run
    in:
      $let:
        tests:
          $map: {$eval: environments}
          each(env):
            taskId: {$eval: as_slugid(env.name)}
            provisionerId: proj-taskcluster
            workerType: ci
            created: {$fromNow: ''}
            deadline: {$fromNow: '60 minutes'}
            payload:
              maxRunTime: 3600
              image: ${env.image}
              command: {$eval: 'env.command'}
            metadata:
              name: ${env.name}
              description: ${env.name}
              owner: ${owner}
              source: ${repo.url}

      in:
        $flattenDeep:
        - $if: 'tasks_for == "github-push"'
          then:
            - {$eval: tests}
            - $if: 'event["ref"] == "refs/heads/master"'
              then:
                taskId: {$eval: as_slugid("demo_build")}
                provisionerId: proj-taskcluster
                workerType: ci
                created: {$fromNow: ''}
                deadline: {$fromNow: '60 minutes'}
                scopes:
                  - secrets:get:project/taskcluster/json-e-deploy
                routes:
                  - notify.email.taskcluster-notifications@mozilla.com.on-failed
                  - notify.email.taskcluster-notifications@mozilla.com.on-exception
                payload:
                  env:
                    GITHUB_BRANCH: ${event["ref"]}
                    GITHUB_BASE_REPO_URL: ${repo.git_url}
                  features:
                    taskclusterProxy: true
                  maxRunTime: 3600
                  image: node:8
                  command:
                    - /bin/bash
                    - '--login'
                    - '-c'
                    - >-
                      git clone ${repo.git_url} repo &&
                      cd repo &&
                      git config advice.detachedHead false &&
                      git checkout ${repo.ref} &&
                      yarn &&
                      yarn build-demo &&
                      ./deploy.sh
                metadata:
                  name: demo site build and deploy
                  description: build and publish a new demo site
                  owner: ${owner}
                  source: ${repo.url}
        - $if: 'tasks_for == "github-pull-request" && event["action"] in ["opened", "reopened", "synchronize"]'
          then:
            # We can skip this if pushed to our own repo since push event will get it
            $if: 'event.pull_request.base.repo.id != event.pull_request.head.repo.id'
            then: {$eval: tests}
